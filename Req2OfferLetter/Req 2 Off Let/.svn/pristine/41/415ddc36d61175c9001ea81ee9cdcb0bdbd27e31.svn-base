using DotNetReq2Offer.Models;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Net;
using System.Net.Mail;
using System.Web;
using System.Web.Helpers;
using System.Web.Mvc;

namespace LoginAndForgot.Controllers
{
    public class HomesController : Controller
    {
       [HttpGet]
        public ActionResult Login()
        {
            return View();
        }
        [HttpPost]
        [ValidateAntiForgeryToken]
        public ActionResult Login(tbl_User objUser)
        {
            if (ModelState.IsValid)
            {
                using (Req2offerDBEntities1 db = new Req2offerDBEntities1())
                {
                    var obj = db.tbl_User.Where(a => a.Email_Id.Equals(objUser.Email_Id) && a.Password.Equals(objUser.Password)).FirstOrDefault();
                   // var obj = db.tbl_User.Where(p => p.Employee_Name == objUser.Employee_Name && p.Password == objUser.Password).FirstOrDefault();
                    if (obj != null)
                    {
                        Session["Email_ID"] = obj.Email_Id.ToString();
                        Session["Password"] = obj.Password.ToString();
                       
                    }
                }
                return RedirectToAction("UserDashBoard");
            }
            return View(objUser);
        }
        [HttpGet]
        public ActionResult UserDashBoard()
        {
            if (Session["Email_ID"] != null)
            {
                return View();
            }
            else
            {
                return RedirectToAction("Login");
            }
        }
        public ActionResult ForgotPassword()
        {
            return View();
        }
        [HttpPost]
        public ActionResult ForgotPassword(string Email_Id)
        {
            //Verify Email ID
            //Generate Reset password link 
            //Send Email 
            string message = "";
            // bool status = false;

            using (Req2offerDBEntities1 dc = new Req2offerDBEntities1())
            {
                var account = dc.tbl_User.Where(a => a.Email_Id == Email_Id).FirstOrDefault();
                if (account != null)
                {
                    //Send email for reset password
                    string resetCode = Guid.NewGuid().ToString();
                    SendVerificationLinkEmail(account.Email_Id, resetCode, "ResetPassword");
                    account.ResetPasswordCode = resetCode;

                    //This line I have added here to avoid confirm password not match issue , as we had added a confirm password property 
                    //in our model class in part 1
                    dc.Configuration.ValidateOnSaveEnabled = false;
                    dc.SaveChanges();
                    message = "Reset password link has been sent to your email id.";
                }
                else
                {
                    message = "Account not found";
                }
            }
            ViewBag.Message = message;
            return View();
        }

        [NonAction]
        public void SendVerificationLinkEmail(string emailID, string activationCode, string emailFor = "VerifyAccount")
        {
            var verifyUrl = "/User/" + emailFor + "/" + activationCode;
            var link = Request.Url.AbsoluteUri.Replace(Request.Url.PathAndQuery, verifyUrl);

            var fromEmail = new MailAddress("suryabhaskar.g@ojas-it.com", "suryabhaskar5@");
            var toEmail = new MailAddress(emailID);
            // var fromEmailPassword = "******"; // Replace with actual password

            string subject = "";
            string body = "";
            if (emailFor == "VerifyAccount")
            {
                subject = "Your account is successfully created!";
                body = "<br/><br/>We are excited to tell you that your Dotnet Awesome account is" +
                    " successfully created. Please click on the below link to verify your account" +
                    " <br/><br/><a href='" + link + "'>" + link + "</a> ";
            }
            else if (emailFor == "ResetPassword")
            {
                subject = "Reset Password";
                body = "Hi,<br/><br/>We got request for reset your account password. Please click on the below link to reset your password" +
                    "<br/><br/><a href=" + link + ">Reset Password link</a>";
            }


            var smtp = new SmtpClient
            {
                Host = "smtp.gmail.com",
                Port = 587,
                EnableSsl = true,
                DeliveryMethod = SmtpDeliveryMethod.Network,
                UseDefaultCredentials = false,
                Credentials = new NetworkCredential("suryabhaskar.g@ojas-it.com", "suryabhaskar5@")
            };

            using (var message = new MailMessage(fromEmail, toEmail)
            {
                Subject = subject,
                Body = body,
                IsBodyHtml = true
            })
                smtp.Send(message);
        }
        public ActionResult ResetPassword(string id)
        {
            //Verify the reset password link
            //Find account associated with this link
            //redirect to reset password page
            if (string.IsNullOrWhiteSpace(id))
            {
                return HttpNotFound();
            }

            using (Req2offerDBEntities1 dc = new Req2offerDBEntities1())
            {
                var user = dc.tbl_User.Where(a => a.ResetPasswordCode == id).FirstOrDefault();
                if (user != null)
                {
                    ResetPasswordModel model = new ResetPasswordModel();
                    model.ResetCode = id;
                    return View(model);
                }
                else
                {
                    return HttpNotFound();
                }
            }
        }
        [HttpPost]
        [ValidateAntiForgeryToken]
        public ActionResult ResetPassword(ResetPasswordModel model)
        {
            var message = "";
            if (ModelState.IsValid)
            {
                using (Req2offerDBEntities1 dc = new Req2offerDBEntities1())
                {
                    var user = dc.tbl_User.Where(a => a.ResetPasswordCode == model.ResetCode).FirstOrDefault();
                    if (user != null)
                    {
                        user.Password = Crypto.Hash(model.NewPassword);
                        user.ResetPasswordCode = "";
                        dc.Configuration.ValidateOnSaveEnabled = false;
                        dc.SaveChanges();
                        message = "New password updated successfully";
                    }
                }
            }
            else
            {
                message = "Something invalid";
            }
            ViewBag.Message = message;
            return View(model);
        }


    }
}
